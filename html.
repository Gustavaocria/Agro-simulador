<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulador Agr√≠cola</title>
    <!-- Inclui o Tailwind CSS para estiliza√ß√£o r√°pida e responsiva -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Estilos personalizados para o corpo da p√°gina */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0fdf4; /* Um verde bem claro */
            display: flex;
            justify-content: center;
            align-items: flex-start; /* Alinha no topo para permitir rolagem se necess√°rio */
            min-height: 100vh;
            padding: 20px;
            box-sizing: border-box;
        }

        /* Estilos para o cont√™iner principal do simulador */
        .simulator-container {
            background-color: #ffffff;
            border-radius: 1.5rem; /* Bordas arredondadas */
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            max-width: 900px; /* Largura m√°xima para desktops */
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 2rem;
            animation: fadeIn 1s ease-out; /* Anima√ß√£o de entrada */
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Estilos para bot√µes e inputs */
        .btn-primary {
            background-color: #16a34a; /* Verde escuro */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem; /* Bordas arredondadas */
            font-weight: 600;
            transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out;
            cursor: pointer;
            border: none;
        }

        .btn-primary:hover {
            background-color: #15803d; /* Verde mais escuro no hover */
            transform: translateY(-2px);
        }

        .btn-secondary {
            background-color: #e2e8f0; /* Cinza claro */
            color: #334155; /* Cinza escuro */
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 600;
            transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out;
            cursor: pointer;
            border: none;
        }

        .btn-secondary:hover {
            background-color: #cbd5e1; /* Cinza mais escuro no hover */
            transform: translateY(-2px);
        }

        input[type="number"],
        select {
            border: 1px solid #d1d5db; /* Borda cinza */
            border-radius: 0.5rem;
            padding: 0.6rem 1rem;
            width: 100%;
            box-sizing: border-box;
            transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }

        input[type="number"]:focus,
        select:focus {
            outline: none;
            border-color: #22c55e; /* Verde no foco */
            box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.2);
        }

        /* Classes para mensagens */
        .message-box {
            padding: 1rem;
            border-radius: 0.75rem;
            font-weight: 500;
            margin-top: 1rem;
            display: none; /* Escondido por padr√£o */
            opacity: 0;
            transition: opacity 0.3s ease-out;
        }

        .message-box.show {
            display: block;
            opacity: 1;
        }

        .message-success {
            background-color: #dcfce7; /* Verde claro */
            color: #16a34a; /* Verde escuro */
            border: 1px solid #86efac;
        }

        .message-error {
            background-color: #fee2e2; /* Vermelho claro */
            color: #ef4444; /* Vermelho escuro */
            border: 1px solid #fca5a5;
        }

        /* Layout responsivo com Flexbox para se√ß√µes */
        .section-grid {
            display: flex;
            flex-wrap: wrap; /* Permite que os itens quebrem para a pr√≥xima linha */
            gap: 1.5rem; /* Espa√ßamento entre as colunas */
        }

        .section-grid > div {
            flex: 1 1 calc(50% - 0.75rem); /* Cada item ocupa cerca de metade da largura */
            min-width: 300px; /* Largura m√≠nima para evitar que fiquem muito estreitos */
        }

        /* Responsividade para telas menores */
        @media (max-width: 768px) {
            .simulator-container {
                padding: 1.5rem;
            }
            .section-grid > div {
                flex: 1 1 100%; /* Em telas pequenas, cada item ocupa a largura total */
            }
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">
    <div class="simulator-container">
        <h1 class="text-4xl font-extrabold text-center text-green-700 mb-6">Simulador Agr√≠cola üåæ</h1>

        <!-- Se√ß√£o de Configura√ß√£o Inicial -->
        <div id="initial-setup" class="bg-green-50 p-6 rounded-xl border border-green-200">
            <h2 class="text-2xl font-bold text-green-800 mb-4">In√≠cio da Jornada Rural</h2>
            <p class="text-green-700 mb-4">Defina seu or√ßamento inicial para come√ßar a construir seu imp√©rio agr√≠cola.</p>
            <div class="flex flex-col md:flex-row items-center gap-4">
                <label for="initialBudgetInput" class="text-lg text-gray-700 whitespace-nowrap">Or√ßamento Inicial (R$):</label>
                <input type="number" id="initialBudgetInput" class="flex-grow p-3 rounded-lg border-2 border-green-300 focus:border-green-500 focus:ring-green-500" value="10000" min="100">
                <button id="startButton" class="btn-primary md:w-auto">Iniciar Simula√ß√£o</button>
            </div>
            <div id="setupMessageBox" class="message-box mt-4"></div>
        </div>

        <!-- Se√ß√£o Principal do Simulador (escondida inicialmente) -->
        <div id="game-area" class="hidden">
            <!-- Informa√ß√µes do Jogador -->
            <div class="bg-green-100 p-6 rounded-xl border border-green-300 mb-6">
                <h2 class="text-2xl font-bold text-green-800 mb-4">Sua Fazenda</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-lg text-gray-800">
                    <div><span class="font-semibold">Or√ßamento:</span> <span id="budgetDisplay" class="text-green-700 font-bold">R$ 0.00</span></div>
                    <div><span class="font-semibold">Itens no Invent√°rio:</span></div>
                    <ul id="inventoryList" class="list-disc list-inside col-span-full">
                        <!-- Itens do invent√°rio ser√£o populados aqui -->
                    </ul>
                </div>
            </div>

            <div class="section-grid">
                <!-- Se√ß√£o de Compra -->
                <div class="bg-blue-50 p-6 rounded-xl border border-blue-200">
                    <h2 class="text-2xl font-bold text-blue-800 mb-4">Mercado de Compra</h2>
                    <p class="text-blue-700 mb-4">O que voc√™ deseja adquirir para sua fazenda?</p>
                    <div class="flex flex-col gap-4">
                        <div>
                            <label for="buyItem" class="block text-gray-700 text-sm font-bold mb-2">Item:</label>
                            <select id="buyItem" class="form-select w-full p-3 rounded-lg border-2 border-blue-300 focus:border-blue-500 focus:ring-blue-500">
                                <!-- Op√ß√µes ser√£o populadas via JS -->
                            </select>
                        </div>
                        <div>
                            <label for="buyQuantity" class="block text-gray-700 text-sm font-bold mb-2">Quantidade:</label>
                            <input type="number" id="buyQuantity" class="form-input w-full p-3 rounded-lg border-2 border-blue-300 focus:border-blue-500 focus:ring-blue-500" value="1" min="1">
                        </div>
                        <p class="text-blue-600">Pre√ßo por unidade: <span id="buyPriceDisplay">R$ 0.00</span></p>
                        <button id="buyButton" class="btn-primary">Comprar</button>
                    </div>
                    <div id="buyMessageBox" class="message-box"></div>
                </div>

                <!-- Se√ß√£o de Venda -->
                <div class="bg-red-50 p-6 rounded-xl border border-red-200">
                    <h2 class="text-2xl font-bold text-red-800 mb-4">Mercado de Venda</h2>
                    <p class="text-red-700 mb-4">O que voc√™ deseja vender de sua produ√ß√£o?</p>
                    <div class="flex flex-col gap-4">
                        <div>
                            <label for="sellItem" class="block text-gray-700 text-sm font-bold mb-2">Item:</label>
                            <select id="sellItem" class="form-select w-full p-3 rounded-lg border-2 border-red-300 focus:border-red-500 focus:ring-red-500">
                                <!-- Op√ß√µes ser√£o populadas via JS -->
                            </select>
                        </div>
                        <div>
                            <label for="sellQuantity" class="block text-gray-700 text-sm font-bold mb-2">Quantidade:</label>
                            <input type="number" id="sellQuantity" class="form-input w-full p-3 rounded-lg border-2 border-red-300 focus:border-red-500 focus:ring-red-500" value="1" min="1">
                        </div>
                        <p class="text-red-600">Pre√ßo por unidade: <span id="sellPriceDisplay">R$ 0.00</span></p>
                        <button id="sellButton" class="btn-primary">Vender</button>
                    </div>
                    <div id="sellMessageBox" class="message-box"></div>
                </div>
            </div>

            <!-- Bot√£o de Reiniciar -->
            <div class="mt-8 text-center">
                <button id="resetButton" class="btn-secondary">Reiniciar Simula√ß√£o</button>
            </div>
        </div>
    </div>

    <script>
        // Vari√°veis globais para o estado do jogo
        let budget = 0;
        let inventory = {}; // Armazena a quantidade de cada item
        let marketItems = [
            { id: 'corn', name: 'Milho', price: 50, type: 'crop' },
            { id: 'wheat', name: 'Trigo', price: 60, type: 'crop' },
            { id: 'cow', name: 'Vaca', price: 1500, type: 'animal' },
            { id: 'tractor', name: 'Trator', price: 20000, type: 'equipment' },
            { id: 'chicken', name: 'Galinha', price: 30, type: 'animal' },
            { id: 'eggs', name: 'Ovos (d√∫zia)', price: 10, type: 'product' },
            { id: 'milk', name: 'Leite (litro)', price: 4, type: 'product' }
        ];

        // Elementos do DOM
        const initialSetupDiv = document.getElementById('initial-setup');
        const gameAreaDiv = document.getElementById('game-area');
        const initialBudgetInput = document.getElementById('initialBudgetInput');
        const startButton = document.getElementById('startButton');
        const setupMessageBox = document.getElementById('setupMessageBox');

        const budgetDisplay = document.getElementById('budgetDisplay');
        const inventoryList = document.getElementById('inventoryList');

        const buyItemSelect = document.getElementById('buyItem');
        const buyQuantityInput = document.getElementById('buyQuantity');
        const buyPriceDisplay = document.getElementById('buyPriceDisplay');
        const buyButton = document.getElementById('buyButton');
        const buyMessageBox = document.getElementById('buyMessageBox');

        const sellItemSelect = document.getElementById('sellItem');
        const sellQuantityInput = document.getElementById('sellQuantity');
        const sellPriceDisplay = document.getElementById('sellPriceDisplay');
        const sellButton = document.getElementById('sellButton');
        const sellMessageBox = document.getElementById('sellMessageBox');

        const resetButton = document.getElementById('resetButton');

        // --- Fun√ß√µes de Ajuda ---

        /**
         * Exibe uma mensagem na tela por um tempo limitado.
         * @param {HTMLElement} messageBoxElement - O elemento div onde a mensagem ser√° exibida.
         * @param {string} message - O texto da mensagem.
         * @param {'success'|'error'} type - O tipo da mensagem (para aplicar classes CSS).
         */
        function showMessage(messageBoxElement, message, type) {
            messageBoxElement.textContent = message;
            messageBoxElement.className = `message-box show message-${type}`;
            setTimeout(() => {
                messageBoxElement.classList.remove('show');
                messageBoxElement.textContent = ''; // Limpa o texto ap√≥s a transi√ß√£o
            }, 3000); // Mensagem desaparece ap√≥s 3 segundos
        }

        /**
         * Formata um valor num√©rico para a moeda brasileira (R$).
         * @param {number} value - O valor a ser formatado.
         * @returns {string} O valor formatado.
         */
        function formatCurrency(value) {
            return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        }

        // --- Fun√ß√µes de Atualiza√ß√£o da UI ---

        /**
         * Atualiza a exibi√ß√£o do or√ßamento na tela.
         */
        function updateBudgetDisplay() {
            budgetDisplay.textContent = formatCurrency(budget);
        }

        /**
         * Atualiza a lista de itens no invent√°rio.
         */
        function updateInventoryDisplay() {
            inventoryList.innerHTML = ''; // Limpa a lista existente
            let hasItems = false;
            for (const itemId in inventory) {
                if (inventory[itemId] > 0) {
                    hasItems = true;
                    const item = marketItems.find(i => i.id === itemId);
                    if (item) {
                        const listItem = document.createElement('li');
                        listItem.textContent = `${item.name}: ${inventory[itemId]}`;
                        inventoryList.appendChild(listItem);
                    }
                }
            }
            if (!hasItems) {
                const listItem = document.createElement('li');
                listItem.textContent = 'Nenhum item no invent√°rio.';
                inventoryList.appendChild(listItem);
            }
        }

        /**
         * Popula os dropdowns de compra e venda e atualiza os pre√ßos exibidos.
         */
        function populateMarketDropdowns() {
            buyItemSelect.innerHTML = '';
            sellItemSelect.innerHTML = '';

            marketItems.forEach(item => {
                const optionBuy = document.createElement('option');
                optionBuy.value = item.id;
                optionBuy.textContent = `${item.name} (R$ ${item.price.toFixed(2)})`;
                buyItemSelect.appendChild(optionBuy);

                // S√≥ adiciona ao dropdown de venda se o item estiver no invent√°rio ou for vend√°vel (e.g., produtos)
                // Para este simulador simples, vamos adicionar todos os itens vend√°veis que n√£o s√£o apenas equipamentos
                if (item.type !== 'equipment') {
                    const optionSell = document.createElement('option');
                    optionSell.value = item.id;
                    optionSell.textContent = `${item.name} (R$ ${(item.price * 0.9).toFixed(2)})`; // Pre√ßo de venda ligeiramente menor
                    sellItemSelect.appendChild(optionSell);
                }
            });

            // Atualiza os pre√ßos iniciais exibidos
            updateBuyPriceDisplay();
            updateSellPriceDisplay();
        }

        /**
         * Atualiza o pre√ßo do item selecionado na se√ß√£o de compra.
         */
        function updateBuyPriceDisplay() {
            const selectedItemId = buyItemSelect.value;
            const selectedItem = marketItems.find(item => item.id === selectedItemId);
            if (selectedItem) {
                buyPriceDisplay.textContent = formatCurrency(selectedItem.price);
            } else {
                buyPriceDisplay.textContent = formatCurrency(0);
            }
        }

        /**
         * Atualiza o pre√ßo do item selecionado na se√ß√£o de venda.
         */
        function updateSellPriceDisplay() {
            const selectedItemId = sellItemSelect.value;
            const selectedItem = marketItems.find(item => item.id === selectedItemId);
            if (selectedItem) {
                // Assume que o pre√ßo de venda √© 90% do pre√ßo de compra
                sellPriceDisplay.textContent = formatCurrency(selectedItem.price * 0.9);
            } else {
                sellPriceDisplay.textContent = formatCurrency(0);
            }
        }

        // --- Fun√ß√µes de L√≥gica do Jogo ---

        /**
         * Inicia a simula√ß√£o com o or√ßamento definido.
         */
        function startGame() {
            const initialBudget = parseFloat(initialBudgetInput.value);
            if (isNaN(initialBudget) || initialBudget <= 0) {
                showMessage(setupMessageBox, 'Por favor, insira um or√ßamento inicial v√°lido e positivo.', 'error');
                return;
            }

            budget = initialBudget;
            inventory = {}; // Limpa o invent√°rio
            updateBudgetDisplay();
            updateInventoryDisplay();
            populateMarketDropdowns(); // Popula os dropdowns com itens do mercado

            initialSetupDiv.classList.add('hidden');
            gameAreaDiv.classList.remove('hidden');
            showMessage(setupMessageBox, 'Simula√ß√£o iniciada com sucesso!', 'success');
        }

        /**
         * Reinicia a simula√ß√£o para o estado inicial.
         */
        function resetGame() {
            budget = 0;
            inventory = {};
            updateBudgetDisplay();
            updateInventoryDisplay();

            initialBudgetInput.value = '10000'; // Define um valor padr√£o
            initialSetupDiv.classList.remove('hidden');
            gameAreaDiv.classList.add('hidden');
            showMessage(setupMessageBox, 'Simula√ß√£o reiniciada. Defina um novo or√ßamento.', 'success');
        }

        /**
         * L√≥gica para comprar um item.
         */
        function buyItem() {
            const selectedItemId = buyItemSelect.value;
            const quantity = parseInt(buyQuantityInput.value);

            if (!selectedItemId || isNaN(quantity) || quantity <= 0) {
                showMessage(buyMessageBox, 'Por favor, selecione um item e insira uma quantidade v√°lida.', 'error');
                return;
            }

            const item = marketItems.find(i => i.id === selectedItemId);
            if (!item) {
                showMessage(buyMessageBox, 'Item n√£o encontrado no mercado.', 'error');
                return;
            }

            const cost = item.price * quantity;

            if (budget < cost) {
                showMessage(buyMessageBox, `Or√ßamento insuficiente! Voc√™ precisa de ${formatCurrency(cost)} mas tem ${formatCurrency(budget)}.`, 'error');
                return;
            }

            budget -= cost;
            inventory[item.id] = (inventory[item.id] || 0) + quantity;

            updateBudgetDisplay();
            updateInventoryDisplay();
            showMessage(buyMessageBox, `Voc√™ comprou ${quantity} de ${item.name} por ${formatCurrency(cost)}.`, 'success');
        }

        /**
         * L√≥gica para vender um item.
         */
        function sellItem() {
            const selectedItemId = sellItemSelect.value;
            const quantity = parseInt(sellQuantityInput.value);

            if (!selectedItemId || isNaN(quantity) || quantity <= 0) {
                showMessage(sellMessageBox, 'Por favor, selecione um item e insira uma quantidade v√°lida.', 'error');
                return;
            }

            const item = marketItems.find(i => i.id === selectedItemId);
            if (!item) {
                showMessage(sellMessageBox, 'Item n√£o encontrado para venda.', 'error');
                return;
            }

            if (!inventory[item.id] || inventory[item.id] < quantity) {
                showMessage(sellMessageBox, `Voc√™ n√£o tem ${quantity} de ${item.name} para vender. Voc√™ tem ${inventory[item.id] || 0}.`, 'error');
                return;
            }

            // O pre√ßo de venda √© um pouco menor que o de compra
            const revenue = (item.price * 0.9) * quantity;

            budget += revenue;
            inventory[item.id] -= quantity;

            updateBudgetDisplay();
            updateInventoryDisplay();
            showMessage(sellMessageBox, `Voc√™ vendeu ${quantity} de ${item.name} por ${formatCurrency(revenue)}.`, 'success');
        }

        // --- Listeners de Eventos ---

        startButton.addEventListener('click', startGame);
        resetButton.addEventListener('click', resetGame);
        buyButton.addEventListener('click', buyItem);
        sellButton.addEventListener('click', sellItem);

        buyItemSelect.addEventListener('change', updateBuyPriceDisplay);
        sellItemSelect.addEventListener('change', updateSellPriceDisplay);

        // Inicializa o estado da interface quando a p√°gina carrega
        window.onload = () => {
            // Garante que os dropdowns sejam populados no carregamento, mesmo que o jogo ainda n√£o tenha come√ßado
            // para que os pre√ßos possam ser exibidos corretamente se o usu√°rio interagir antes de iniciar
            populateMarketDropdowns();
            updateBudgetDisplay(); // Exibe R$ 0.00 inicialmente
            updateInventoryDisplay(); // Exibe "Nenhum item" inicialmente
        };
    </script>
</body>
</html>
